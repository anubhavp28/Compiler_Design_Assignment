%{
#include <stdio.h>
#include <iostream>
#include "symTab.h"
using namespace std;
int yylex(void);
void yyerror(char const *s);
extern int yylineno;
#define YYDEBUG 1

%}

%define parse.error verbose

%token ':'
%token <varName> ID IC FC '=' NOP "nop" PRINT "print" READ "read" INTTYPE "int" FLOATTYPE "real" WHILE "while" DO "do" IF "if" THEN "then" ELSE "else" STRING
%type <etype> e;
%left '|'
%left '&'
%left '~'
%left DEQL '<' '>'
%left '+' '-' 
%left '*' '/'

%token UMINUS

%union {
    struct ETYPE{
        int varIndex;
        char typeCode;
    } etype;

    char varName[100];
}

%start p
 
%%

p: dl sl
;

dl: dl d
 |
;

d: vl ':' ty
;

vl: ID
 | vl ID
;

ty: "int" 
 | "real"
;

sl: s sl
 | s
;

s: as
 | is
 | ls
 | ios
 | "nop"
;

as: ID '=' e
;

is: "if" be "then" sl "else" sl ';'
;

ls: "while" be "do" sl ';'
;

ios: "print" pe
 | "read" ID
;

pe: e
 | STRING
;

be: be '|' be
 | be '&' be
 | '~' be
 | '(' be ')'
 | re
;

re: e DEQL e
 | e '<' e
 | e '>' e
;

e: e '+' e
 | e '-' e
 | e '*' e
 | e '/' e
 | '-' e %prec UMINUS
 | '(' e ')'
 | ID {  }
 | IC
 | FC
;

%%
int main() {
    return yyparse();
}

void yyerror(char const *s) {cerr << s <<" "<<yylineno<<endl;}